(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{251:function(e,t,a){"use strict";a.r(t);var r=a(9),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"git-general-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-general-commands"}},[e._v("#")]),e._v(" Git: General commands")]),e._v(" "),a("p",[e._v("Git: a version control system ..")]),e._v(" "),a("p",[a("b",[e._v("1.")]),e._v(" -- pull vs fetch vs merge:")]),e._v(" "),a("p",[a("code",[e._v("Git Pull")]),e._v(": perform as a fetch additionally merge changes into your local branch"),a("br"),e._v("\n("),a("code",[e._v("git pull = git fetch + git merge")]),e._v(")")]),e._v(" "),a("p",[a("code",[e._v("Git Fetch")]),e._v(": download any changes to local except for local branch (local branch stay unchanged)")]),e._v(" "),a("p",[a("code",[e._v("Git Rebase")]),e._v(": rewrite the changes of one branch onto another without creating a new commit")]),e._v(" "),a("p",[a("code",[e._v("Git Merge")]),e._v(": merge changes from remote to local")]),e._v(" "),a("p",[a("b",[e._v("2.")]),e._v(" -- git pull vs git pull rebase:")]),e._v(" "),a("p",[a("code",[e._v("git pull = git fetch + git merge")])]),e._v(" "),a("p",[a("code",[e._v("git pull --rebase = git fetch + git rebase")])]),e._v(" "),a("p",[e._v("Common usage: "),a("code",[e._v("git pull --rebase")]),e._v(", providing more cleaner and won't impose a "),a("code",[e._v("logical grouping")]),e._v(" on your commits")]),e._v(" "),a("p",[e._v("Simple word: "),a("code",[e._v("git pull --rebase")]),e._v(" made "),a("code",[e._v("code reviewer")]),e._v(" life much easier to review the commits")]),e._v(" "),a("p",[a("strong",[e._v("_ after git rebase, if we have conflicts, we normally "),a("code",[e._v("git add .")]),e._v(" + "),a("code",[e._v("git rebase --continue")]),e._v(" + "),a("code",[e._v("git push")]),e._v(" _")])]),e._v(" "),a("p",[a("b",[e._v("3.")]),e._v(" -- git push commands:")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("u"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("-u")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")])]),e._v(" means "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("--set-upstream")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" eg"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("git push -u origin master")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")])]),e._v("\n")])])]),a("p",[a("code",[e._v("git push origin HEAD")]),e._v(": A handy way to push the current branch to the same name on the remote.")]),e._v(" "),a("p",[a("code",[e._v("git push origin HEAD:master")]),e._v(": Push the current branch to the remote ref matching master in the origin repository. This form is convenient to push the current branch without thinking about its local name.")]),e._v(" "),a("p",[a("b",[e._v("4.")]),e._v(" -- How to combine old commits into 1 commit before merge (Equivalent with "),a("code",[e._v("Squash")]),e._v("):")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("git reset --soft the-commit-hash-before-the-first-commit-for-this-branch")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),a("p",[e._v("Then, do "),a("code",[e._v("git push -f")]),e._v(" to update code for that branch")]),e._v(" "),a("p",[a("b",[e._v("5.")]),e._v(" -- "),a("code",[e._v("git push --force-with-lease")]),e._v(":")]),e._v(" "),a("p",[e._v("it helps developers to double check whether someone has already push something, (try to avoid overwrite other developer's code)")]),e._v(" "),a("p",[a("b",[e._v("6.")]),e._v(" -- "),a("code",[e._v("git cherry-pick")]),e._v(":")]),e._v(" "),a("p",[e._v("When to use:")]),e._v(" "),a("p",[e._v("Case 1: when we want to pick up specific commit from one branch (original/source) instead of all commit and paste commit to a new branch (destination)")]),e._v(" "),a("p",[e._v("Case 2: when we push our code into a wrong branch, we want to put the commit into a correct branch")]),e._v(" "),a("p",[e._v("Branch A has 3 commits, Branch B has 6 commits, and we only need Branch B second commit and put into Branch A, this is story case, we can use "),a("code",[e._v("cherry-pick")]),e._v(" command in "),a("code",[e._v("Branch A")]),e._v(". After the cherry-pick, the commit which get cherry picked will be set as the "),a("code",[e._v("topest/latest")]),e._v(" commit for Branch A.")]),e._v(" "),a("p",[e._v("If we cherry pick multiple files (this is the command): "),a("code",[e._v("git cherry-pick #hash-1 #hash-2")]),e._v("\nIf we have conflicts during cherry pick, so we "),a("code",[e._v("first")]),e._v(" resolve the conflicts and then use "),a("code",[e._v("git cherry-pick --continue")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/DamengRandom/cherry-pick-recall",target:"_blank"}},[e._v("Github example for cherry-pick (recall)")])]),e._v(" "),a("p",[a("b",[e._v("7.")]),e._v(" -- git revert vs git reset:")]),e._v(" "),a("p",[a("strong",[e._v("_ danger level: checkout -> revert -> reset _")])]),e._v(" "),a("p",[e._v("git revert: delete the "),a("code",[e._v("specific")]),e._v(" commit from commit chains, just don't want this specific commit")]),e._v(" "),a("p",[e._v("git reset: reset to a specific spot of previous commit, it deletes a range of commits")]),e._v(" "),a("p",[e._v("#commit-1 -> #commit-2 -> #commit-3 -> #commit-4")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("For git revert, we can revert #commit-3, so #commit-3 will be "),a("code",[e._v("deleted")]),e._v(" and behaves as "),a("code",[e._v("never added before")]),e._v(", and it will add a new "),a("code",[e._v("REVERT-hash-commit")]),e._v(" as latest commit instead of delete the commit which needs to be reverted !!!! Again, if we want to change back, we can revert the "),a("code",[e._v("REVERT-hash-commit")]),e._v(", so we changed back !!")])]),e._v(" "),a("li",[a("p",[e._v("For git reset, we can reset #commit-2 as "),a("code",[e._v("HEAD")]),e._v(", so, #commit-3 and #commit-4 are removed forever")])])]),e._v(" "),a("p",[e._v("["),a("a",{attrs:{href:"https://www.youtube.com/watch?v=RIYrfkZjWmA&ab_channel=TheNetNinja",target:"_blank"}},[e._v("Reference")]),e._v("]")]),e._v(" "),a("p",[a("b",[e._v("8.")]),e._v(" -- git logs:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("git reflog")])]),e._v(" "),a("li",[a("code",[e._v("git log --oneline")])]),e._v(" "),a("li",[a("code",[e._v("git log")])]),e._v(" "),a("li",[a("code",[e._v("git diff")])]),e._v(" "),a("li",[a("code",[e._v("git show #hash-commit")])])]),e._v(" "),a("p",[a("b",[e._v("9.")]),e._v(" --track (Git command):")]),e._v(" "),a("p",[e._v("git command --track is for fetching remote branch into local")]),e._v(" "),a("p",[e._v("When we donâ€™t have the local branch and we can run this command to checkout the branch and fetch that branch into your local codebase:")]),e._v(" "),a("p",[e._v("Eg: git checkout --track origin/feature/sample-pos-two")]),e._v(" "),a("p",[a("b",[e._v("10.")]),e._v(" git rebase process commands:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("git checkout master (target-branch)\ngit pull\ngit checkout feature-branch\ngit rebase master // also need to fix merge issues / conflicts after run this command\ngit rebase --continue\ngit rebase --abort // if not happy with rebase changes\ngit push -f\n")])])]),a("p",[a("b",[e._v("11.")]),e._v(" git branch rename:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// assume you were not in your current branch:\ngit branch -m oldName newName\n// assume you were inside your current branch\ngit branch -m newName\n")])])]),a("p",[a("b",[e._v("12.")]),e._v(" "),a("code",[e._v("git add -A")])]),e._v(" "),a("ul",[a("li",[e._v("add everything in your current repo even you were inside the sub-folder")])]),e._v(" "),a("p",[a("b",[e._v("13.")]),e._v(" "),a("code",[e._v("git config --global alias.ac '!git add -A && git commit -m'")])]),e._v(" "),a("ul",[a("li",[e._v('used for setup global commit. Then we can type git ac "commit message"')])]),e._v(" "),a("p",[a("b",[e._v("14.")]),e._v(" "),a("code",[e._v("git describe --always --tag --long")])]),e._v(" "),a("ul",[a("li",[e._v("used for get the latest master branch commit hash code of your current codebase [Give it a shot, then you know better]")])]),e._v(" "),a("p",[a("b",[e._v("15.")]),e._v(" "),a("code",[e._v("git revert commit-hash")]),e._v(": revert means not going to delete the commit, just create a new commit which revert back to before current target revert commit.")]),e._v(" "),a("p",[e._v("For example: we need to revert to commit-3 (commit-1, commit-2, commit-3).\nSo now, we do "),a("code",[e._v("git revert commit-3-hash-code")]),e._v("\nThen we can see now, we have a new commit (commit-4), which is exactly same as commit-2 !!")]),e._v(" "),a("p",[a("code",[e._v("git revert HEAD")]),e._v(": it means undo the most recent commit !!")]),e._v(" "),a("p",[a("b",[e._v("16.")]),e._v(" "),a("code",[e._v("git reflog")]),e._v(": we can see the history of git logs")]),e._v(" "),a("p",[a("b",[e._v("17.")]),e._v(" "),a("code",[e._v("git branch -vv")]),e._v(": give details about the branch")]),e._v(" "),a("p",[a("b",[e._v("18.")]),e._v(" "),a("code",[e._v("git remote update --prune")]),e._v(": remove the remote branch reference if the branch no longer exists in the remote repository.")]),e._v(" "),a("p",[e._v("Example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Step 1: `git remote update --prune`\nStep 2: `git branch -vv | awk '/: gone]/{print $1}' xargs git branch -d`\n\nawk : is used for search certain text\n/: gone]/ : means find keyword 'gone'\nprint $1 : means print out the first result\nxargs : means read the input data which the research result of (awk '/: gone]/{print $1}')\n")])])]),a("p",[a("b",[e._v("19.")]),e._v(" "),a("code",[e._v("git reset --hard origin/branch_name")]),e._v(': just re-pull the remote branch ("branch_name") code and wipe out all local changes, super dangerous !!')]),e._v(" "),a("p",[a("b",[e._v("20.")]),e._v(" "),a("code",[e._v("git commit --amend --no-edit")]),e._v(": overwrite current commit without creating a new commit")]),e._v(" "),a("ul",[a("li",[e._v("The pre-condition for running this command is "),a("code",[e._v("you already open a PR in remote git server")])])]),e._v(" "),a("p",[a("b",[e._v("21.")]),e._v(" "),a("code",[e._v("git revert -m 1 <already-committed-hash>")]),e._v(": its used for reverting back already merged commit. The example case: "),a("code",[e._v("I made a mistake to accidentally merge code into master branch and I want to revert back for master branch ..")])]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1.")]),e._v(" git checkout "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("b revert"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("merge "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// branch out from master branch !!")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2.")]),e._v(" git revert "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("m "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("already"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("committed"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("hash"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3.")]),e._v(" git commit "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("m "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"revert merge fix"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("4.")]),e._v(" git push "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Then ask for review")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Reference: https://stackoverflow.com/questions/7099833/how-to-revert-a-merge-commit-thats-already-pushed-to-remote-branch")]),e._v("\n")])])]),a("p",[a("b",[e._v("22.")]),e._v(" Git rename the file from lowercase to uppercase")]),e._v(" "),a("p",[e._v("in the current branch, it can be done by: "),a("code",[e._v("git mv OLD_FOLDER NEW_FOLDER")]),e._v(" ensure all files are renamed instead of deleted !!!")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://res.cloudinary.com/dameng/image/upload/v1649890240/tipify/rename-git-files.png",alt:"rename-git-files"}})]),e._v(" "),a("p",[a("strong",[e._v("_ -- Reference: "),a("a",{attrs:{href:"https://git-scm.com/docs",target:"_blank"}},[e._v("https://git-scm.com/docs")]),e._v(" _")])]),e._v(" "),a("p",[a("b",[e._v("23.")]),e._v(" Git checkout to a branch you forgot the full name")]),e._v(" "),a("p",[e._v("git checkout "),a("code",[e._v("git branch | grep branch-name-you-can-remember")])]),e._v(" "),a("p",[a("b",[e._v("24.")])])])}),[],!1,null,null,null);t.default=o.exports}}]);